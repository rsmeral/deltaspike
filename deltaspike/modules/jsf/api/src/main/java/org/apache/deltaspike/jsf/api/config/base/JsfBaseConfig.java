/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.deltaspike.jsf.api.config.base;

import org.apache.deltaspike.core.api.config.DeltaSpikeConfig;
import org.apache.deltaspike.core.api.config.base.CoreBaseConfig;
import org.apache.deltaspike.core.api.config.base.TypedConfig;
import org.apache.deltaspike.jsf.api.config.view.Folder;
import org.apache.deltaspike.jsf.api.config.view.View;

import javax.enterprise.inject.Default;

public interface JsfBaseConfig extends DeltaSpikeConfig
{
    interface ViewConfig
    {
        TypedConfig<String> CUSTOM_DEFAULT_BASE_PATH_BUILDER =
            new TypedConfig<String>(View.DefaultBasePathBuilder.class.getName(), null, String.class);

        TypedConfig<String> CUSTOM_DEFAULT_FILE_NAME_BUILDER =
            new TypedConfig<String>(View.DefaultFileNameBuilder.class.getName(), null, String.class);

        TypedConfig<String> CUSTOM_DEFAULT_EXTENSION_BUILDER =
            new TypedConfig<String>(View.DefaultExtensionBuilder.class.getName(), null, String.class);

        TypedConfig<String> CUSTOM_DEFAULT_FOLDER_NAME_BUILDER =
            new TypedConfig<String>(Folder.DefaultFolderNameBuilder.class.getName(), null, String.class);
    }

    interface Scope
    {
        interface WindowRestriction
        {
            TypedConfig<Integer> MAX_COUNT =
                new TypedConfig<Integer>(CoreBaseConfig.Scope.WindowRestriction.MAX_COUNT.getKey(), 64);

            //10 is enough for the integer generated by DefaultClientWindow#generateNewWindowId - see DELTASPIKE-752
            TypedConfig<Integer> ID_MAX_LENGTH =
                new TypedConfig<Integer>("deltaspike.window-id.max_length", 10);
        }

        interface ViewDelegation
        {
            TypedConfig<Boolean> DELEGATE_TO_JSF =
                new TypedConfig<Boolean>("deltaspike.scope.view.delegate", Boolean.TRUE);
        }
    }

    TypedConfig<Boolean> INITIAL_REDIRECT_ENABLED =
            new TypedConfig<Boolean>("deltaspike.jsf.initial_redirect_enabled", true);

    TypedConfig<Boolean> ALWAYS_KEEP_MESSAGES =
            new TypedConfig<Boolean>("deltaspike.jsf.always_keep_messages", true);

    TypedConfig<Boolean> ALWAYS_USE_NAVIGATION_HANDLER_ON_SECURITY_VIOLATION =
            new TypedConfig<Boolean>("deltaspike.jsf.always_use_navigation_handler_on_security_violation", false);

    TypedConfig<Boolean> CONTAINER_MANAGED_CONVERTERS_ENABLED =
            new TypedConfig<Boolean>("deltaspike.jsf.container_managed_converters_enabled", true);

    TypedConfig<Boolean> CONTAINER_MANAGED_VALIDATORS_ENABLED =
            new TypedConfig<Boolean>("deltaspike.jsf.container_managed_validators_enabled", true);

    TypedConfig<Boolean> FULL_STATE_SAVING_FALLBACK_ENABLED =
            new TypedConfig<Boolean>("deltaspike.jsf.full_state_saving_fallback_enabled", true);

    TypedConfig<Boolean> ALLOW_POST_REQUEST_WITHOUT_DOUBLE_SUBMIT_PREVENTION =
            new TypedConfig<Boolean>("deltaspike.jsf.allow_post_request_without_double_submit_prevention", true);

    TypedConfig<Class> EXCEPTION_QUALIFIER =
            new TypedConfig<Class>("deltaspike.jsf.exception_qualifier", Default.class);
}
